# vim: set expandtab
# SPDX-License-Identifier: FSFAP

###############################################################################
#
# Copyright (c) 2019-2024 Jeffrey H. Johnson <trnsz@pobox.com>
# Copyright (c) 2024 The DPS8M Development Team
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered "AS-IS",
# without any warranty.
#
###############################################################################

align_assign_span                = 2
align_enum_equ_span              = 2                             # '=' in enum definition
align_func_params                = true
align_keep_tabs                  = true
align_nl_cont                    = true
align_number_right               = true
align_on_operator                = true
align_on_tabstop                 = true                          # align on tabstops
align_pp_define_gap              = 2
align_pp_define_span             = 2
align_pp_define_together         = true
align_right_cmt_span             = 1
align_struct_init_span           = 2                             # align stuff in a structure init '= { }'
align_var_def_colon              = true
align_var_def_inline             = true
align_var_def_span               = 2
align_with_tabs                  = false                         # use tabs to align
cmt_c_nl_start                   = true
# cmt_cpp_to_c                   = 1
cmt_star_cont                    = true
code_width                       = 136
eat_blanks_after_open_brace      = true
eat_blanks_before_close_brace    = true
indent_brace                     = 2
indent_braces                    = false
indent_class                     = true
indent_columns                   = 2
indent_label                     = 2                             # pos: absolute col, neg: relative column
indent_var_def_cont              = true
indent_with_tabs                 = 0                             # 1=indent to level only, 2=indent with tabs
input_tab_size                   = 2                             # original tab size
mod_add_long_ifdef_else_comment  = 1
mod_add_long_ifdef_endif_comment = 1
mod_full_brace_do                = force                         # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_for               = force                         # "for () a--;" vs "for () { a--; }"
mod_full_brace_function          = force
mod_full_brace_if                = force                         # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_while             = force                         # "while (a) a--;" vs "while (a) { a--; }"
mod_paren_on_return              = false                         # "return 1;" vs "return (1);"
mod_pawn_semicolon               = true
mod_sort_include                 = false
nl_after_brace_open              = true
nl_after_for                     = force
nl_after_if                      = force
nl_after_return                  = true
nl_before_case                   = 1
nl_brace_else                    = force                         # "} else" vs "} \n else" - cuddle else
nl_brace_while                   = force                         # "} while" vs "} \n while" - cuddle while
nl_do_brace                      = force                         # "do {" vs "do \n {"
nl_else_brace                    = force                         # "else {" vs "else \n {"
nl_end_of_file                   = add
nl_enum_brace                    = force                         # "enum {" vs "enum \n {"
nl_fcall_brace                   = force                         # "list_for_each() {" v "list_for_each()\n{"
nl_fdef_brace                    = force                         # "int foo() {" vs "int foo()\n{"
nl_for_brace                     = force                         # "for () {" vs "for () \n {"
nl_func_call_args_multi_line     = true
nl_func_call_start_multi_line    = true
nl_func_var_def_blk              = 1
nl_if_brace                      = force                         # "if () {" vs "if () \n {"
nl_start_of_file                 = remove
nl_struct_brace                  = force                         # "struct {" vs "struct \n {"
nl_switch_brace                  = force                         # "switch () {" vs "switch () \n {"
nl_union_brace                   = force                         # "union {" vs "union \n {"
nl_while_brace                   = force                         # "while () {" vs "while () \n {"
output_tab_size                  = 1                             # new tab size
pp_if_indent_code                = true
sp_after_cast                    = remove                        # "(int) a" vs "(int)a"
sp_after_comma                   = force
sp_after_sparen                  = force                         # "if () {" vs "if (){"
sp_arith                         = force
sp_assign                        = force
sp_before_sparen                 = force                         # "if (" vs "if("
sp_bool                          = force
sp_compare                       = force
sp_func_call_paren               = remove                        # "foo (" vs "foo("
sp_func_def_paren                = remove                        # "int foo (){" vs "int foo(){"
sp_func_proto_paren              = remove                        # "int foo ();" vs "int foo();"
sp_inside_braces_enum            = force                         # "{ 1 }" vs "{1}"
sp_inside_braces                 = force                         # "{ 1 }" vs "{1}"
sp_inside_braces_struct          = force                         # "{ 1 }" vs "{1}"
sp_inside_paren                  = force
sp_return_paren                  = force                         # "return (1);" vs "return(1);"
sp_sizeof_paren                  = force                         # "sizeof (int)" vs "sizeof(int)"
